             Командная строка (cmd)

чтобы запустить что-то можно просто ввести полный адрес 
калькулятора в системе например вот так

C:\Windows\System32\Calc.exe

можно также добавлять параметры, например
 
C:\Windows\System32\Calc.exe D:\Test.txt

если клацнуть на свойства компьютера - дополнительные свойства
- дополнительно - переменные среды - path - увидим все
адреса папок где cmd будет искать exe файлы

чтобы приложение выполнялось по другому при вызове из под 
cmd в main () нужно передать аргументы и сделать чтобы она
их принимала в самом коде

int main(int argc, char* argv[]) // это такой синтаксис
//первый аргумент должен принимать количество аргументов
{
  cout << "count param: " << argc << endl;
  if (argc > 0)
    cout << argv[0] << endl;
  return 0;
}

команда cd в cmd меняет папку в которой мы находимся 
(change directory)

C:\Users\pavlu> cd source

либо по адресу 
либо просто написать имя папки, тогда переход из папки
в которой находимся в данный момент
чтобы перейти на уровень выше нужно использовать 
команду cd..

команда dir (после имени диска - можно посмотреть инфу
про диск, после папки инфу про папку)

когда вызываем ф-цию и передаём ей текст (Lesson24) то
она первым аргументом принимает кол-во аргументов, учитывая
имя 

cls - команда которая чистит cmd 

в свойстах проекта в debugging можно передать аргумент
с которым будет запускаться проект 

          IPC - взаимодействие между процессами
		  
изначально у каждого процесса своё адресное пространство
соответсвенно они не могут общаться, самый простой способ
это использовать файл - но это не эффективно

используют pipe (труба) - ОС создаёт объект ядра (как 
mutex или event)

по своей сути Pipe это кусок в оперативной памяти, 
при создании мы получаем Handle для записи и 
Handle для чтения

Lesson24IPC

чтобы CreateProcessA - создать - из-под своего приложения
открыть другое 

мы открываем калькулятор, он не закрывается при закрытии
вызвавшего
после открытия они независимы

можно использовать:

WaitForSingleObject(pi.hProcess, INFINITE);

в проекте мы записали в трубу данные из одного проекта
и считали их вторым

MappingObject - объект для длительного обмена между
процессами 

Lesson24MapObj

сначала создадим mutex который будет запрещает повторное
открытие такого же приложения 

код для открытия только 2 раза

int main()
{
	CreateMutexA(NULL, FALSE, "MutexForFirstAppRealization");
	if (ERROR_ALREADY_EXISTS == GetLastError())
	{
		CreateMutexA(NULL, FALSE, "MutexForSecondAppRealization");
		if (ERROR_ALREADY_EXISTS == GetLastError())
		{
			cout << "Can't create second copy of application!" << endl;
			return 0;
		}
	}
	cout << "enter a digit: " << endl;
	int num;
	cin >> num;
	return 0;
}

Д.З. 
1) сделать чтобы оба процесса и принимают и отправляют данные
до тех пор пока кто-то не скажет quit
2) сделать чтобы можно было запускать из-под командной строки
сразу вторую версию программы





