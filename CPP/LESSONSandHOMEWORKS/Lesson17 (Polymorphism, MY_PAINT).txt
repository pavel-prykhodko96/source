
                            Polymorphism

Project: Lesson17

создадим классы Shape, Rectangle, Circle, Point в файлах:

Shape.h
Shape.cpp
Rectangle.h
Rectangle.cpp
Circle.h
Circle.cpp

main() в polymorph_main.cpp

~Shape() = default; //явное указание что нужно создать дестр. 
                    //по умолчанию
чтобы инициализировать родительский класс нужно в инициализаторе
написать Parent(...), напр.: Shape (...)

Если из-под указателя на базовый (напр. Shape) класс который
хранит адрес объекта класса наследника вызвать ф-цию то вызовется
ф-ция родительского класса. Для изменения такого поведения 
необходимо в базовом классе эту ф-цию сделать виртуальной 
инструкция virtual перед объявлением ф-ции. Это даст возможность
на этапе выполнения вызвать ф-цию класса наследника. Это и есть 
полиморфизм.

в классах наследниках также прописывается virtual чисто для читаемости
кода - чтобы не проверять каждый раз что там в базовом
+ после объявления пишется override - что явно указывает что 
мы переопределяем на эту ф-цию

Если не предусматривается возможность создания объекта базового
класса то достаточно сделать или создать хотя бы одну "чисто виртуальную
ф-цию". Синтаксиси её: virtual void draw() = 0;
тела у такой ф-ции не будет в 99%, 1% это чисто для диагностики.

Класс с хотя бы одной чисто виртуальной ф-цией называется абстрактным
виртуальным классом. Объект такого класса создать нельзя а указатель 
можно.

Класс у которого все ф-ции чисто виртуальные называют интерфейсом.
Класс наследник обязан прописать определения всех виртуальных ф-ций,
иначе он тоже будет абстрактным базовым

vector_shape.h - прописываем как создать вектор, который будет 
корректно работать с типом shape

PROJECT Lesson17MY_PAINT

д.з.

сохранить рисунок в файлик (добавить пункт меню save), 
по умолчанию имя paint.png/ .dat
и ещё один пункт меню - open, который будет открывать это файлик
если он существует и прорисовывать это.







